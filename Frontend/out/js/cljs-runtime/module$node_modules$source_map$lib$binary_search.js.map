{
"version":3,
"file":"module$node_modules$source_map$lib$binary_search.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwB7GC,QAASA,gBAAe,CAACC,IAAD,CAAOC,KAAP,CAAcC,OAAd,CAAuBC,SAAvB,CAAkCC,QAAlC,CAA4CC,KAA5C,CAAmD,CAUzE,IAAIC,IAAMC,IAAKC,CAAAA,KAAL,EAAYP,KAAZ,CAAoBD,IAApB,EAA4B,CAA5B,CAANM,CAAuCN,IAA3C,CACIS,IAAML,QAAA,CAASF,OAAT,CAAkBC,SAAA,CAAUG,GAAV,CAAlB,CAAkC,CAAA,CAAlC,CACV,OAAY,EAAZ,GAAIG,GAAJ,CAESH,GAFT,CAIe,CAAV,CAAIG,GAAJ,CAEe,CAAlB,CAAIR,KAAJ,CAAYK,GAAZ,CAESP,eAAA,CAAgBO,GAAhB,CAAqBL,KAArB,CAA4BC,OAA5B,CAAqCC,SAArC,CAAgDC,QAAhD,CAA0DC,KAA1D,CAFT,CAOIA,KAAJ,EAAaP,OAAQY,CAAAA,iBAArB,CACST,KAAA,CAAQE,SAAUQ,CAAAA,MAAlB,CAA2BV,KAA3B,CAAmC,CAAC,CAD7C,CAGSK,GAZN,CAiBc,CAAjB,CAAIA,GAAJ,CAAUN,IAAV,CAESD,eAAA,CAAgBC,IAAhB,CAAsBM,GAAtB,CAA2BJ,OAA3B,CAAoCC,SAApC,CAA+CC,QAA/C,CAAyDC,KAAzD,CAFT,CAMIA,KAAJ,EAAaP,OAAQY,CAAAA,iBAArB;AACSJ,GADT,CAGgB,CAAP,CAAAN,IAAA,CAAW,CAAC,CAAZ,CAAgBA,IA1C8C,CAhB3EF,OAAQc,CAAAA,oBAAR,CAA+B,CAC/Bd,QAAQY,CAAAA,iBAAR,CAA4B,CAgF5BZ,QAAQe,CAAAA,MAAR,CAAiBC,QAAe,CAACZ,OAAD,CAAUC,SAAV,CAAqBC,QAArB,CAA+BC,KAA/B,CAAsC,CACpE,GAAyB,CAAzB,GAAIF,SAAUQ,CAAAA,MAAd,CACE,MAAO,CAAC,CAGNI,QAAAA,CAAQhB,eAAA,CAAgB,CAAC,CAAjB,CAAoBI,SAAUQ,CAAAA,MAA9B,CAAsCT,OAAtC,CAA+CC,SAA/C,CACgBC,QADhB,CAC0BC,KAD1B,EACmCP,OAAQc,CAAAA,oBAD3C,CAEZ,IAAY,CAAZ,CAAIG,OAAJ,CACE,MAAO,CAAC,CAMV,KAAA,CAAoB,CAApB,EAAOA,OAAP,CAAe,CAAf,EACiE,CADjE,GACMX,QAAA,CAASD,SAAA,CAAUY,OAAV,CAAT,CAA2BZ,SAAA,CAAUY,OAAV,CAAkB,CAAlB,CAA3B,CAAiD,CAAA,CAAjD,CADN,CAAA,CAIE,EAAEA,OAGJ,OAAOA,QArB6D,CAzFuC;",
"sources":["node_modules/source-map/lib/binary-search.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$source_map$lib$binary_search\"] = function(global,require,module,exports) {\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","recursiveSearch","aLow","aHigh","aNeedle","aHaystack","aCompare","aBias","mid","Math","floor","cmp","LEAST_UPPER_BOUND","length","GREATEST_LOWER_BOUND","search","exports.search","index"]
}
