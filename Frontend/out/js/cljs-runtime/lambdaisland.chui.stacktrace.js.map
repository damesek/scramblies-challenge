{"version":3,"sources":["lambdaisland/chui/stacktrace.cljs"],"mappings":";;;AAOA,uCAAA,vCAAMA,sFAASC;AAAf,AACE,oBAAMA;AAAN,mGACM,4CAAKA,nEACL,sEAAA,IAAA,1EAACC,vBACD,sGAAA,SAAA,/GAACA,vBACD,2IAAA,SAAA,pJAACA,9BACD,uLAAA,IAAA,pLAACA;;AALP;;;AAOF,0CAAA,1CAAMC,4FAAYC;AAAlB,AACE,IAAA,AAAA,OAAAC,mCAAA,AAAAC,uHAAA,WAAQI,zEAAM,AAACC,uDAAqBP;AAApC,AACE,IAAAQ,qBAAA,gEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA66E+C,AAAAgB,sBAAArB;IA76E/CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,YAAA,AAAAK,eAAAN,gBAAAK,vCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,2CAAA,4HAAA,0EAAA,0EAAA,lNACa,AAACrB,qCAAQ,AAAkBiC,+EAC/B,AAAcA,wEACd,AAAgBA,+EACd,AAAkBA;;AAJ7B,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,sDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,YAAA,AAAAS,gBAAAjB,xBAAMoB;AAAN,AAAA,OAAAF,eAAA,2CAAA,4HAAA,0EAAA,0EAAA,yFAAA,AAAAH,sDAAA,AAAAI,eAAAnB,hXACa,AAACb,qCAAQ,AAAkBiC,+EAC/B,AAAcA,wEACd,AAAgBA,+EACd,AAAkBA;;;AAJ7B;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAAYF;;gBADd,IAAAH,mBAAAC;AAAA,AAAA,OAAAC,6BAAAF","names":["lambdaisland.chui.stacktrace/unmunge","s","clojure.string/replace","lambdaisland.chui.stacktrace/from-error","error","kitchen-async.promise/->promise","kitchen_async.promise.then","e__26264__auto__","e28916","kitchen-async.promise/reject","trace","js/module$node_modules$stacktrace_js$stacktrace.fromError","iter__4652__auto__","s__28920","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__28922","cljs.core/chunk-buffer","i__28921","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28919","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","frame","cljs.core/chunk-first"],"sourcesContent":["(ns lambdaisland.chui.stacktrace\n  (:require [stacktrace-js :as stacktrace]\n            [stacktrace-gps :as gps]\n            [kitchen-async.promise :as p]\n            [reagent.core :as reagent]\n            [clojure.string :as str]))\n\n(defn unmunge [s]\n  (when s\n    (-> (str s)\n        (str/replace \"$\" \".\")\n        (str/replace \"_STAR_\" \"*\")\n        (str/replace \"_BANG_\" \"!\")\n        (str/replace \"_\" \"-\"))))\n\n(defn from-error [error]\n  (p/let [trace (stacktrace/fromError error)]\n    (for [frame trace]\n      {:function (unmunge (.getFunctionName frame))\n       :file (.getFileName frame)\n       :line (.getLineNumber frame)\n       :column (.getColumnNumber frame)})))\n\n\n\n;; (p/let [t (from-error js/xxx)]\n;;   (def xxx t))\n\n;; (p/let [trace (stacktrace/fromError js/xxx)\n;;         trace' (p/all\n;;                 (map #(.pinpoint (gps.) %)\n;;                      trace))]\n;;   (def ttt trace'))\n"]}