{"version":3,"sources":["lambdaisland/deep_diff2/puget/color/ansi.cljc"],"mappings":"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","names":["lambdaisland.deep-diff2.puget.color.ansi/sgr-code","lambdaisland.deep-diff2.puget.color.ansi/esc","codes","cljs.core.map","clojure.string.join","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","lambdaisland.deep-diff2.puget.color.ansi/escape","seq38158","self__4852__auto__","cljs.core/seq","lambdaisland.deep-diff2.puget.color.ansi/sgr","seq38166","G__38167","cljs.core/first","cljs.core/next","self__4851__auto__","string","lambdaisland.deep_diff2.puget.color.ansi.escape","lambdaisland.deep-diff2.puget.color.ansi/strip","clojure.string/replace","lambdaisland.deep-diff2.puget.color/document","options","element","document","temp__5802__auto__","cljs.core.get","lambdaisland.deep-diff2.puget.color/text","text"],"sourcesContent":["(ns lambdaisland.deep-diff2.puget.color.ansi\n  \"Coloring implementation that applies ANSI color codes to text designed to be\n  output to a terminal.\n\n  Use with a `:color-markup` of `:ansi`.\"\n  (:require\n    [clojure.string :as str]\n    [lambdaisland.deep-diff2.puget.color :as color]))\n\n(def sgr-code\n  \"Map of symbols to numeric SGR (select graphic rendition) codes.\"\n  {:none        0\n   :bold        1\n   :underline   3\n   :blink       5\n   :reverse     7\n   :hidden      8\n   :strike      9\n   :black      30\n   :red        31\n   :green      32\n   :yellow     33\n   :blue       34\n   :magenta    35\n   :cyan       36\n   :white      37\n   :fg-256     38\n   :fg-reset   39\n   :bg-black   40\n   :bg-red     41\n   :bg-green   42\n   :bg-yellow  43\n   :bg-blue    44\n   :bg-magenta 45\n   :bg-cyan    46\n   :bg-white   47\n   :bg-256     48\n   :bg-reset   49})\n\n(defn esc\n  \"Returns an ANSI escope string which will apply the given collection of SGR\n  codes.\"\n  [codes]\n  (let [codes (map sgr-code codes codes)\n        codes (str/join \\; codes)]\n    (str \\u001b \\[ codes \\m)))\n\n(defn escape\n  \"Returns an ANSI escope string which will enact the given SGR codes.\"\n  [& codes]\n  (esc codes))\n\n(defn sgr\n  \"Wraps the given string with SGR escapes to apply the given codes, then reset\n  the graphics.\"\n  [string & codes]\n  (str (esc codes) string (escape :none)))\n\n(defn strip\n  \"Removes color codes from the given string.\"\n  [string]\n  (str/replace string #\"\\u001b\\[[0-9;]*[mK]\" \"\"))\n\n(defmethod color/document :ansi\n  [options element document]\n  (if-let [codes (-> options :color-scheme (get element) seq)]\n    [:span [:pass (esc codes)] document [:pass (escape :none)]]\n    document))\n\n(defmethod color/text :ansi\n  [options element text]\n  (if-let [codes (-> options :color-scheme (get element) seq)]\n    (str (esc codes) text (escape :none))\n    text))\n"]}