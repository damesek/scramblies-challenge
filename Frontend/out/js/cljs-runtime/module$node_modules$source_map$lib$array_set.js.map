{
"version":3,
"file":"module$node_modules$source_map$lib$array_set.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBzGC,QAASA,SAAQ,EAAG,CAClB,IAAKC,CAAAA,MAAL,CAAc,EACd,KAAKC,CAAAA,IAAL,CAAYC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAFM,CATpB,IAAIC,KAAOR,OAAA,CAAQ,yCAAR,CAAX,CACIS,IAAMH,MAAOI,CAAAA,SAAUC,CAAAA,cAgB3BR,SAASS,CAAAA,SAAT,CAAqBC,QAA2B,CAACC,MAAD,CAASC,gBAAT,CAA2B,CAEzE,IADA,IAAIC,IAAM,IAAIb,QAAd,CACSc,EAAI,CADb,CACgBC,IAAMJ,MAAOK,CAAAA,MAA7B,CAAqCF,CAArC,CAAyCC,GAAzC,CAA8CD,CAAA,EAA9C,CACED,GAAII,CAAAA,GAAJ,CAAQN,MAAA,CAAOG,CAAP,CAAR,CAAmBF,gBAAnB,CAEF,OAAOC,IALkE,CAc3Eb,SAASO,CAAAA,SAAUW,CAAAA,IAAnB,CAA0BC,QAAsB,EAAG,CACjD,MAAOhB,OAAOiB,CAAAA,mBAAP,CAA2B,IAAKlB,CAAAA,IAAhC,CAAsCc,CAAAA,MADI,CASnDhB;QAASO,CAAAA,SAAUU,CAAAA,GAAnB,CAAyBI,QAAqB,CAACC,IAAD,CAAOV,gBAAP,CAAyB,CACrE,IAAIW,KAAOlB,IAAKmB,CAAAA,WAAL,CAAiBF,IAAjB,CAAX,CACIG,YAAcnB,GAAIoB,CAAAA,IAAJ,CAAS,IAAKxB,CAAAA,IAAd,CAAoBqB,IAApB,CADlB,CAEII,IAAM,IAAK1B,CAAAA,MAAOe,CAAAA,MACjBS,YAAL,EAAoBb,CAAAA,gBAApB,EACE,IAAKX,CAAAA,MAAO2B,CAAAA,IAAZ,CAAiBN,IAAjB,CAEGG,YAAL,GACE,IAAKvB,CAAAA,IAAL,CAAUqB,IAAV,CADF,CACoBI,GADpB,CAPqE,CAiBvE3B,SAASO,CAAAA,SAAUD,CAAAA,GAAnB,CAAyBuB,QAAqB,CAACP,IAAD,CAAO,CAC/CC,IAAAA,CAAOlB,IAAKmB,CAAAA,WAAL,CAAiBF,IAAjB,CACX,OAAOhB,IAAIoB,CAAAA,IAAJ,CAAS,IAAKxB,CAAAA,IAAd,CAAoBqB,IAApB,CAF4C,CAUrDvB,SAASO,CAAAA,SAAUuB,CAAAA,OAAnB,CAA6BC,QAAyB,CAACT,IAAD,CAAO,CAC3D,IAAIC,KAAOlB,IAAKmB,CAAAA,WAAL,CAAiBF,IAAjB,CACX,IAAIhB,GAAIoB,CAAAA,IAAJ,CAAS,IAAKxB,CAAAA,IAAd,CAAoBqB,IAApB,CAAJ,CACE,MAAO,KAAKrB,CAAAA,IAAL,CAAUqB,IAAV,CAET,MAAUS,MAAJ,CAAU,GAAV,CAAgBV,IAAhB,CAAuB,sBAAvB,CAAN;AAL2D,CAa7DtB,SAASO,CAAAA,SAAU0B,CAAAA,EAAnB,CAAwBC,QAAoB,CAACC,IAAD,CAAO,CACjD,GAAY,CAAZ,EAAIA,IAAJ,EAAiBA,IAAjB,CAAwB,IAAKlC,CAAAA,MAAOe,CAAAA,MAApC,CACE,MAAO,KAAKf,CAAAA,MAAL,CAAYkC,IAAZ,CAET,MAAUH,MAAJ,CAAU,wBAAV,CAAqCG,IAArC,CAAN,CAJiD,CAYnDnC,SAASO,CAAAA,SAAU6B,CAAAA,OAAnB,CAA6BC,QAAyB,EAAG,CACvD,MAAO,KAAKpC,CAAAA,MAAOqC,CAAAA,KAAZ,EADgD,CAIzDvC,QAAQC,CAAAA,QAAR,CAAmBA,QAxGsF;",
"sources":["node_modules/source-map/lib/array-set.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$source_map$lib$array_set\"] = function(global,require,module,exports) {\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = util.toSetString(aStr);\n  var isDuplicate = has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    this._set[sStr] = idx;\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  var sStr = util.toSetString(aStr);\n  return has.call(this._set, sStr);\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  var sStr = util.toSetString(aStr);\n  if (has.call(this._set, sStr)) {\n    return this._set[sStr];\n  }\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n\n};"],
"names":["shadow$provide","global","require","module","exports","ArraySet","_array","_set","Object","create","util","has","prototype","hasOwnProperty","fromArray","ArraySet.fromArray","aArray","aAllowDuplicates","set","i","len","length","add","size","ArraySet.prototype.size","getOwnPropertyNames","ArraySet.prototype.add","aStr","sStr","toSetString","isDuplicate","call","idx","push","ArraySet.prototype.has","indexOf","ArraySet.prototype.indexOf","Error","at","ArraySet.prototype.at","aIdx","toArray","ArraySet.prototype.toArray","slice"]
}
