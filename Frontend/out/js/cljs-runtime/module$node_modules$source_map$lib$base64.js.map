{
"version":3,
"file":"module$node_modules$source_map$lib$base64.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQtG,IAAIC,aAAe,kEAAA,CAAA,KAAA,CAAA,EAAA,CAKnBD,QAAQE,CAAAA,MAAR,CAAiBC,QAAS,CAACC,MAAD,CAAS,CACjC,GAAI,CAAJ,EAASA,MAAT,EAAmBA,MAAnB,CAA4BH,YAAaI,CAAAA,MAAzC,CACE,MAAOJ,aAAA,CAAaG,MAAb,CAET,MAAM,KAAIE,SAAJ,CAAc,4BAAd,CAA6CF,MAA7C,CAAN,CAJiC,CAWnCJ,QAAQO,CAAAA,MAAR,CAAiBC,QAAS,CAACC,QAAD,CAAW,CAiBnC,MAhBWC,GAgBX,EAAYD,QAAZ,EAfWE,EAeX,EAAwBF,QAAxB,CACUA,QADV,CAhBWC,EAgBX,CAbcE,EAkBd,EAAeH,QAAf,EAjBcI,GAiBd,EAA2BJ,QAA3B,CACUA,QADV,CAlBcG,EAkBd,CATmBE,EASnB,CAfWC,EAoBX,EAAYN,QAAZ,EAnBWO,EAmBX,EAAwBP,QAAxB;AACUA,QADV,CApBWM,EAoBX,CAbmBE,EAanB,CAjBWC,EAsBX,EAAIT,QAAJ,CACS,EADT,CArBYU,EA0BZ,EAAIV,QAAJ,CACS,EADT,CAKO,CAAC,CA1C2B,CAxBiE;",
"sources":["node_modules/source-map/lib/base64.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$source_map$lib$base64\"] = function(global,require,module,exports) {\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","intToCharMap","encode","exports.encode","number","length","TypeError","decode","exports.decode","charCode","bigA","bigZ","littleA","littleZ","littleOffset","zero","nine","numberOffset","plus","slash"]
}
