{"version":3,"sources":["lambdaisland/chui/report.cljs"],"mappings":"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","names":["lambdaisland.chui.report/html-printer","lambdaisland.deep_diff2.printer","lambdaisland.chui.report/pprint-str","fipp-doc","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__38652","cljs.core/*print-newline*","*print-fn*-orig-val__38653","cljs.core/*print-fn*","*print-newline*-temp-val__38654","*print-fn*-temp-val__38655","x__4796__auto__","lambdaisland.deep-diff2.printer-impl/print-doc","lambdaisland.chui.report/pprint-doc","doc","wrap-lines?","lambdaisland.chui.report/assertion-type","m","_","temp__5802__auto__","s","cljs.core/seq?","cljs.core/seq","cljs.core/first","js/lambdaisland","js/lambdaisland.chui","js/lambdaisland.chui.report","js/lambdaisland.chui.report.print-expr","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__38657","cljs.core/MultiFn","cljs.core.symbol","lambdaisland.chui.report/print-expr","cljs.core/contains?","lambdaisland.deep-diff2.puget.printer/format-doc","lambdaisland.chui.report/print-expr-=","cljs.core/second","cljs.core/count","vec__38658","seq__38659","first__38660","cljs.core/next","expected","actuals","iter__4652__auto__","s__38662","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__38664","cljs.core/chunk-buffer","i__38663","vec__38665","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38661","cljs.core/chunk-rest","vec__38668","cljs.core/cons","cljs.core/rest","i","form","cljs.core.map","cljs.core/vector","cljs.core.range","cljs.core.drop","s__38672","b__38674","i__38673","vec__38675","iter__38671","vec__38678","actual","cljs.core/coll?","cljs.core/every?","s__38682","b__38684","i__38683","vec__38686","iter__38681","vec__38694","lambdaisland.deep-diff2/diff","js/lambdaisland.chui.report.fail-summary","fexpr__38700","lambdaisland.chui.report/fail-summary","p__38702","map__38703","cljs.core/--destructure-map","lambdaisland.chui.report/testing-vars-str","file","line","testing-vars","and__4251__auto__","cljs.core/reverse","p1__38701#","cljs.core/meta","p__38704","map__38705","lambdaisland.chui.report/message-context","testing-contexts","message","s__38707","b__38709","i__38708","vec__38710","iter__38706","vec__38713","ctx","cljs.core.apply","cljs.core/str","cljs.core.repeat","p__38716","map__38717","p__38718","map__38719","p__38721","map__38722","exception","with-let38723","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__27613__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init38724","cljs.core/not","res38725","p1__38720#","trace-p","lambdaisland.chui.stacktrace/from-error","trace","reagent.core.atom","kitchen-async.promise/->promise","kitchen_async.promise.then","e__26264__auto__","e38726","kitchen-async.promise/reject","t","cljs.core/reset!","cljs.core/deref","cljs.core.doall","s__38728","b__38730","i__38729","vec__38731","map__38734","iter__38727","vec__38735","map__38738","function","column","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns lambdaisland.chui.report\n  (:require [clojure.pprint :as pprint]\n            [kitchen-async.promise :as p]\n            [lambdaisland.chui.stacktrace :as stacktrace]\n            [lambdaisland.deep-diff2 :as ddiff]\n            [lambdaisland.deep-diff2.printer-impl :as printer-impl]\n            [lambdaisland.deep-diff2.puget.color.html]\n            [lambdaisland.deep-diff2.puget.printer :as puget-printer]\n            [reagent.core :as reagent]\n            [clojure.string :as str]))\n\n(def html-printer (ddiff/printer {:color-markup :html-classes}))\n\n(defn pprint-str [fipp-doc]\n  (with-out-str\n    (printer-impl/print-doc fipp-doc html-printer)))\n\n(defn pprint-doc [doc wrap-lines?]\n  [:pre (when wrap-lines? {:class \"wrap\"})\n   [:code {:dangerouslySetInnerHTML {:__html (pprint-str doc)}}]])\n\n(defn assertion-type\n  \"Given a clojure.test event, return the first symbol in the expression inside (is).\"\n  [m _]\n  (if-let [s (and (seq? (:expected m)) (seq (:expected m)))]\n    (first s)\n    :default))\n\n(defmulti print-expr assertion-type)\n\n(defmethod print-expr :default [m wrap-lines?]\n  [pprint-doc\n   [:span\n    (when (contains? m :expected)\n      [:span\n       \"Expected:\" :line\n       [:nest (puget-printer/format-doc html-printer (:expected m))]])\n    (when (contains? m :expected)\n      [:span\n       :break\n       \"Actual:\" :line\n       [:nest (puget-printer/format-doc html-printer (:actual m))]])]\n   wrap-lines?])\n\n(defn print-expr-= [m wrap-lines?]\n  (if (and (seq? (second (:actual m)))\n           (> (count (second (:actual m))) 2))\n    ;; :actual is of the form (not (= ...))\n\n    (let [[_ expected & actuals] (-> m :actual second)]\n      [:div.scroll\n       [:h4 \"Expected\"]\n       (for [[i form] (map vector (range) (drop 2 (:expected m)))]\n         ^{:key (str i)}\n         [pprint-doc (puget-printer/format-doc html-printer form) wrap-lines?])\n       [:h4 \"To equal\"]\n       [pprint-doc (puget-printer/format-doc html-printer expected) wrap-lines?]\n       [:h4 \"Actual value\"]\n       (for [[i actual] (map vector (range) actuals)]\n         ^{:key (str i)}\n         [pprint-doc (puget-printer/format-doc html-printer actual) wrap-lines?])\n       (when (and (coll? expected) (every? coll? actuals))\n         [:div\n          [:h4 \"Diff\"]\n          (for [[i actual] (map vector (range) actuals)]\n            ^{:key (str i)}\n            [pprint-doc\n             (puget-printer/format-doc\n              html-printer\n              (ddiff/diff expected actual))\n             wrap-lines?])])])\n    [:div.scroll\n     (when (contains? m :expected)\n       [:div\n        [:h4 \"Expected\"]\n        [pprint-doc (puget-printer/format-doc html-printer (:expected m)) wrap-lines?]])\n     (when (contains? m :actual)\n       [:div\n        [:h4 \"Actual\"]\n        [pprint-doc (puget-printer/format-doc html-printer (:actual m)) wrap-lines?]])]))\n\n(defmethod print-expr '= [m wrap-lines?]\n  (print-expr-= m wrap-lines?))\n\n(defmethod print-expr '=? [m wrap-lines?]\n  (print-expr-= m wrap-lines?))\n\n(defmulti fail-summary :type)\n\n(defmethod fail-summary :default [_ _])\n\n(defn testing-vars-str\n  \"Returns a string representation of the current test. Renders names\n  in :testing-vars as a list, then the source file and line of current\n  assertion.\"\n  [{:keys [file line testing-vars] :as m}]\n  (str\n   ;; Uncomment to include namespace in failure report:\n   ;;(ns-name (:ns (meta (first *testing-vars*)))) \"/ \"\n   (and (seq testing-vars)\n        (reverse (map #(:name (meta %)) testing-vars)))\n   (when file\n     (str \" (\" file\n          (when line\n            (str \":\" line))\n          \")\"))))\n\n(defn message-context [{:keys [testing-contexts testing-vars expected message] :as m}]\n  [:<>\n   (when (seq testing-contexts)\n     [:div.context\n      (for [[i ctx] (map vector (range) (reverse testing-contexts))]\n        ^{:key (str i)}\n        [:div.context (apply str (repeat i \"\u00a0\u00a0\")) ctx])])\n   (when message\n     [:div.message message])])\n\n(defmethod fail-summary :pass [{:keys [testing-contexts testing-vars expected message] :as m}\n                               wrap-lines?]\n  [:div.fail-summary\n   [:aside \"PASS\"]\n   [message-context m]\n   [pprint-doc\n    (puget-printer/format-doc html-printer expected)\n    wrap-lines?]])\n\n(defmethod fail-summary :fail [{:keys [testing-contexts testing-vars message] :as m}\n                               wrap-lines?]\n  [:div.fail-summary\n   [:aside \"FAIL\"]\n   ;; \"FAIL in \" (testing-vars-str m)\n   [message-context m]\n   [print-expr m wrap-lines?]])\n\n(defmethod fail-summary :error [{exception :actual\n                                 :keys [testing-contexts testing-vars message] :as m}\n                                wrap-lines?]\n  (reagent/with-let [trace-p (stacktrace/from-error exception)\n                     trace (reagent/atom nil)]\n    (p/let [t trace-p] (reset! trace t))\n    [:div.fail-summary\n     [:aside \"ERROR\"]\n     [message-context m]\n     [:div (str exception)]\n     [:pre (if wrap-lines? {:class \"wrap\"} {:class \"scroll\"})\n      (if-let [trace @trace]\n        (doall\n         (for [[{:keys [function file line column]} i] (map vector trace (range))]\n           ^{:key i}\n           [:<> function \" (\" [:a {:href file} file] \":\" line \":\" column \")\\n\"]))\n        (.-stack exception))]\n     [:a.bottom-link {:on-click #(do (js/console.log exception) (.preventDefault %)) :href \"#\"} \"Log error\"]]))\n"]}