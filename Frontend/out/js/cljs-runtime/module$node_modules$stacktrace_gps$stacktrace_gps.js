shadow$provide.module$node_modules$stacktrace_gps$stacktrace_gps=function(global,require,module,exports){(function(root,factory){"function"===typeof define&&define.amd?define("stacktrace-gps",["source-map","stackframe"],factory):"object"===typeof exports?module.exports=factory(require("module$node_modules$source_map$lib$source_map_consumer"),require("module$node_modules$stackframe$stackframe")):root.StackTraceGPS=factory(root.SourceMap||root.sourceMap,root.StackFrame)})(this,function(SourceMap,StackFrame){function _xdr(url){return new Promise(function(resolve,
reject){var req=new XMLHttpRequest;req.open("get",url);req.onerror=reject;req.onreadystatechange=function(){4===req.readyState&&(200<=req.status&&300>req.status||"file://"===url.substr(0,7)&&req.responseText?resolve(req.responseText):reject(Error("HTTP status: "+req.status+" retrieving "+url)))};req.send()})}function _atob(b64str){if("undefined"!==typeof window&&window.atob)return window.atob(b64str);throw Error("You must supply a polyfill for window.atob in this environment");}function _ensureStackFrameIsLegit(stackframe){if("object"!==
typeof stackframe)throw new TypeError("Given StackFrame is not an object");if("string"!==typeof stackframe.fileName)throw new TypeError("Given file name is not a String");if("number"!==typeof stackframe.lineNumber||0!==stackframe.lineNumber%1||1>stackframe.lineNumber)throw new TypeError("Given line number must be a positive integer");if("number"!==typeof stackframe.columnNumber||0!==stackframe.columnNumber%1||0>stackframe.columnNumber)throw new TypeError("Given column number must be a non-negative integer");
return!0}function _findSourceMappingURL(source){for(var sourceMappingUrlRegExp=/\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/mg,lastSourceMappingUrl,matchSourceMappingUrl;matchSourceMappingUrl=sourceMappingUrlRegExp.exec(source);)lastSourceMappingUrl=matchSourceMappingUrl[1];if(lastSourceMappingUrl)return lastSourceMappingUrl;throw Error("sourceMappingURL not found");}function _extractLocationInfoFromSourceMapSource(stackframe,sourceMapConsumer,sourceCache){return new Promise(function(resolve,reject){var loc=
sourceMapConsumer.originalPositionFor({line:stackframe.lineNumber,column:stackframe.columnNumber});loc.source?((reject=sourceMapConsumer.sourceContentFor(loc.source))&&(sourceCache[loc.source]=reject),resolve(new StackFrame({functionName:loc.name||stackframe.functionName,args:stackframe.args,fileName:loc.source,lineNumber:loc.line,columnNumber:loc.column}))):reject(Error("Could not get original source for given stackframe and source map"))})}return function StackTraceGPS(opts){if(!(this instanceof
StackTraceGPS))return new StackTraceGPS(opts);opts=opts||{};this.sourceCache=opts.sourceCache||{};this.sourceMapConsumerCache=opts.sourceMapConsumerCache||{};this.ajax=opts.ajax||_xdr;this._atob=opts.atob||_atob;this._get=function(location){return new Promise(function(resolve,reject){var isDataUrl="data:"===location.substr(0,5);this.sourceCache[location]?resolve(this.sourceCache[location]):opts.offline&&!isDataUrl?reject(Error("Cannot make network requests in offline mode")):isDataUrl?(isDataUrl=
location.match(/^data:application\/json;([\w=:"-]+;)*base64,/))?(reject=location.substr(isDataUrl[0].length),reject=this._atob(reject),this.sourceCache[location]=reject,resolve(reject)):reject(Error("The encoding of the inline sourcemap is not supported")):(isDataUrl=this.ajax(location,{method:"get"}),this.sourceCache[location]=isDataUrl,isDataUrl.then(resolve,reject))}.bind(this))};this._getSourceMapConsumer=function(sourceMappingURL,defaultSourceRoot){return new Promise(function(resolve$jscomp$0){if(this.sourceMapConsumerCache[sourceMappingURL])resolve$jscomp$0(this.sourceMapConsumerCache[sourceMappingURL]);
else{var sourceMapConsumerPromise=new Promise(function(resolve,reject){return this._get(sourceMappingURL).then(function(sourceMapSource){if("string"===typeof sourceMapSource)if(sourceMapSource=sourceMapSource.replace(/^\)\]\}'/,""),"undefined"!==typeof JSON&&JSON.parse)sourceMapSource=JSON.parse(sourceMapSource);else throw Error("You must supply a polyfill for JSON.parse in this environment");"undefined"===typeof sourceMapSource.sourceRoot&&(sourceMapSource.sourceRoot=defaultSourceRoot);resolve(new SourceMap.SourceMapConsumer(sourceMapSource))}).catch(reject)}.bind(this));
this.sourceMapConsumerCache[sourceMappingURL]=sourceMapConsumerPromise;resolve$jscomp$0(sourceMapConsumerPromise)}}.bind(this))};this.pinpoint=function(stackframe){return new Promise(function(resolve,reject){this.getMappedLocation(stackframe).then(function(mappedStackFrame){function resolveMappedStackFrame(){resolve(mappedStackFrame)}this.findFunctionName(mappedStackFrame).then(resolve,resolveMappedStackFrame)["catch"](resolveMappedStackFrame)}.bind(this),reject)}.bind(this))};this.findFunctionName=
function(stackframe){return new Promise(function(resolve,reject){_ensureStackFrameIsLegit(stackframe);this._get(stackframe.fileName).then(function(source){var lineNumber=stackframe.lineNumber,columnNumber=stackframe.columnNumber;a:{var guessedFunctionName=[/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*function\b/,/function\s+([^('"`]*?)\s*\(([^)]*)\)/,/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*(?:eval|new Function)\b/,/\b(?!(?:if|for|switch|while|with|catch)\b)(?:(?:static)\s+)?(\S+)\s*\(.*?\)\s*\{/,
/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*\(.*?\)\s*=>/];source=source.split("\n");for(var code="",maxLines=Math.min(lineNumber,20),i=0;i<maxLines;++i){var line=source[lineNumber-i-1],commentPos=line.indexOf("//");0<=commentPos&&(line=line.substr(0,commentPos));if(line)for(code=line+code,line=guessedFunctionName.length,commentPos=0;commentPos<line;commentPos++){var m=guessedFunctionName[commentPos].exec(code);if(m&&m[1]){guessedFunctionName=m[1];break a}}}guessedFunctionName=void 0}guessedFunctionName?
resolve(new StackFrame({functionName:guessedFunctionName,args:stackframe.args,fileName:stackframe.fileName,lineNumber,columnNumber})):resolve(stackframe)},reject)["catch"](reject)}.bind(this))};this.getMappedLocation=function(stackframe){return new Promise(function(resolve,reject){if("function"!==typeof Object.defineProperty||"function"!==typeof Object.create)throw Error("Unable to consume source maps in older browsers");_ensureStackFrameIsLegit(stackframe);var sourceCache=this.sourceCache,fileName=
stackframe.fileName;this._get(fileName).then(function(source){source=_findSourceMappingURL(source);var isDataUrl="data:"===source.substr(0,5),defaultSourceRoot=fileName.substring(0,fileName.lastIndexOf("/")+1);"/"===source[0]||isDataUrl||/^https?:\/\/|^\/\//i.test(source)||(source=defaultSourceRoot+source);return this._getSourceMapConsumer(source,defaultSourceRoot).then(function(sourceMapConsumer){return _extractLocationInfoFromSourceMapSource(stackframe,sourceMapConsumer,sourceCache).then(resolve)["catch"](function(){resolve(stackframe)})})}.bind(this),
reject)["catch"](reject)}.bind(this))}}})}
//# sourceMappingURL=module$node_modules$stacktrace_gps$stacktrace_gps.js.map
