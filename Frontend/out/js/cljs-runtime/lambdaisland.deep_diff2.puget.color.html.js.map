{"version":3,"sources":["lambdaisland/deep_diff2/puget/color/html.cljc"],"mappings":"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","names":["lambdaisland.deep-diff2.puget.color.html/style-attribute","lambdaisland.deep-diff2.puget.color.html/style","codes","attributes","p1__38195#","cljs.core.map","cljs.core.get","cljs.core/name","clojure.string.join","p__38203","vec__38204","cljs.core.nth","k","v","lambdaisland.deep-diff2.puget.color.html/escape-html-text","text","clojure.string/escape","lambdaisland.deep-diff2.puget.color.html/escape-html-node","node","escaped-text","spans","clojure.string.split","cljs.core.reduce","acc","span","G__38210","cljs.core._EQ_","cljs.core/first","semicolon-pos","cljs.core.fnil","cljs.core/inc","clojure.string.index_of","escaped","cljs.core.subs","cljs.core.conj","cljs.core/seq","lambdaisland.deep-diff2.puget.color.html/escape-html-document","document","clojure.walk/postwalk","lambdaisland.deep-diff2.puget.color/document","options","element","temp__5802__auto__","lambdaisland.deep-diff2.puget.color/text"],"sourcesContent":["(ns lambdaisland.deep-diff2.puget.color.html\n  \"Coloring implementation that wraps text in HTML tags to apply color.\n\n  Supports the following modes for `:color-markup`:\n\n  - `:html-inline` applies inline `style` attributes to the tags.\n  - `:html-classes` adds semantic `class` attributes to the tags.\"\n  (:require\n   [clojure.string :as str]\n   [clojure.walk :refer [postwalk]]\n   [lambdaisland.deep-diff2.puget.color :as color]))\n\n(def style-attribute\n  \"Map from keywords usable in a color-scheme value to vectors\n  representing css style attributes\"\n  {:none       nil\n   :bold       [:font-weight \"bold\"]\n   :underline  [:text-decoration \"underline\"]\n   :blink      [:text-decoration \"blink\"]\n   :reverse    nil\n   :hidden     [:visibility \"hidden\"]\n   :strike     [:text-decoration \"line-through\"]\n   :black      [:color \"black\"]\n   :red        [:color \"red\"]\n   :green      [:color \"green\"]\n   :yellow     [:color \"yellow\"]\n   :blue       [:color \"blue\"]\n   :magenta    [:color \"magenta\"]\n   :cyan       [:color \"cyan\"]\n   :white      [:color \"white\"]\n   :fg-256     nil\n   :fg-reset   nil\n   :bg-black   [:background-color \"black\"]\n   :bg-red     [:background-color \"red\"]\n   :bg-green   [:background-color \"green\"]\n   :bg-yellow  [:background-color \"yellow\"]\n   :bg-blue    [:background-color \"blue\"]\n   :bg-magenta [:background-color \"magenta\"]\n   :bg-cyan    [:background-color \"cyan\"]\n   :bg-white   [:background-color \"white\"]\n   :bg-256     nil\n   :bg-reset   nil})\n\n(defn style\n  \"Returns a formatted style attribute for a span given a seq of\n  keywords usable in a :color-scheme value\"\n  [codes]\n  (let [attributes (map #(get style-attribute % [:color (name %)]) codes)]\n    (str \"style=\\\"\"\n         (str/join \";\" (map (fn [[k v]] (str (name k) \":\" v)) attributes))\n         \"\\\"\")))\n\n(defn escape-html-text\n  \"Escapes special characters into HTML entities.\"\n  [text]\n  (str/escape text {\\& \"&amp;\" \\< \"&lt;\" \\> \"&gt;\" \\\" \"&quot;\"}))\n\n(defn escape-html-node\n  \"Applies HTML escaping to the node if it is a string. Returns a print\n  document representing the escaped string, or the original node if not.\"\n  [node]\n  (if (string? node)\n    (let [escaped-text (escape-html-text node)\n          spans (str/split escaped-text #\"(?=&)\")]\n      (reduce (fn [acc span]\n                (case (first span)\n                  nil acc\n                  \\& (let [semicolon-pos ((fnil inc 0) (str/index-of span \\;))\n                           escaped (subs span 0 semicolon-pos)\n                           span (subs span semicolon-pos)\n                           acc (conj acc [:escaped escaped])]\n                       (if (seq span)\n                         (conj acc span)\n                         acc))\n                  (conj acc span)))\n              [:span]\n              spans))\n    node))\n\n(defn escape-html-document\n  \"Escapes special characters into fipp :span/:escaped nodes\"\n  [document]\n  (postwalk escape-html-node document))\n\n(defmethod color/document :html-inline\n  [options element document]\n  (if-let [codes (-> options :color-scheme (get element) seq)]\n    [:span [:pass \"<span \" (style codes) \">\"]\n     (escape-html-document document)\n     [:pass \"</span>\"]]\n    (escape-html-document document)))\n\n(defmethod color/text :html-inline\n  [options element text]\n  (if-let [codes (-> options :color-scheme (get element) seq)]\n    (str \"<span \" (style codes) \">\" (escape-html-text text) \"</span>\")\n    (escape-html-text text)))\n\n(defmethod color/document :html-classes\n  [options element document]\n  [:span [:pass \"<span class=\\\"\" (name element) \"\\\">\"]\n   (escape-html-document document)\n   [:pass \"</span>\"]])\n\n(defmethod color/text :html-classes\n  [options element text]\n  (str \"<span class=\\\"\" (name element) \"\\\">\" (escape-html-text text) \"</span>\"))\n"]}