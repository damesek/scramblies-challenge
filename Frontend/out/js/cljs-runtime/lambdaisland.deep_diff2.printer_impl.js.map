{"version":3,"sources":["lambdaisland/deep_diff2/printer_impl.cljc"],"mappings":"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","names":["lambdaisland.deep-diff2.printer-impl/print-deletion","printer","expr","no-color","cljs.core.assoc","lambdaisland.deep-diff2.puget.color/document","lambdaisland.deep-diff2.puget.printer/format-doc","lambdaisland.deep-diff2.printer-impl/print-insertion","lambdaisland.deep-diff2.printer-impl/print-mismatch","lambdaisland.deep-diff2.printer-impl/print-other","lambdaisland.deep-diff2.printer-impl/map-handler","this","value","ks","G__38635","G__38636","G__38637","fexpr__38634","lambdaisland.deep-diff2.puget.printer/order-collection","cljs.core.partial","cljs.core/sort-by","cljs.core/first","arrangement.core/rank","entries","cljs.core.map","cljs.core.interpose","lambdaisland.deep-diff2.printer-impl/map-entry-handler","k","cljs.core/key","v","cljs.core/val","lambdaisland.deep_diff2.diff_impl/Insertion","cljs.core/coll?","lambdaisland.deep_diff2.diff_impl/Deletion","lambdaisland.deep-diff2.printer-impl/print-handlers","cljs.core.atom","lambdaisland.deep-diff2.printer-impl/type-name","x","t","cljs.core/type","n","cljs.core/empty?","cljs.core.symbol","cljs.core.pr_str","lambdaisland.deep-diff2.printer-impl/print-handler-resolver","extra-handlers","obj","and__4251__auto__","cljs.core.get","cljs.core/deref","cljs.core.merge","lambdaisland.deep-diff2.printer-impl/register-print-handler!","type","handler","cljs.core.swap_BANG_","cljs.core/assoc","var_args","G__38640","lambdaisland.deep-diff2.printer-impl/puget-printer","js/Error","lambdaisland.deep_diff2.printer_impl.puget_printer","opts","lambdaisland.deep-diff2.puget.printer/pretty-printer","or__4253__auto__","cljs.core/*print-length*","lambdaisland.deep-diff2.puget.dispatch/chained-lookup","lambdaisland.deep-diff2.puget.printer/common-handlers","cljs.core.dissoc","lambdaisland.deep-diff2.printer-impl/format-doc","lambdaisland.deep-diff2.printer-impl/print-doc","doc","fipp.engine.pprint_document"],"sourcesContent":["(ns lambdaisland.deep-diff2.printer-impl\n  (:require [arrangement.core]\n            [fipp.engine :as fipp]\n            [lambdaisland.deep-diff2.diff-impl :as diff]\n            [lambdaisland.deep-diff2.puget.color :as color]\n            [lambdaisland.deep-diff2.puget.dispatch :as dispatch]\n            [lambdaisland.deep-diff2.puget.printer :as puget-printer]\n            #?(:cljs [goog.string :refer [format]]))\n  #?(:clj\n     (:import)))\n\n(defn print-deletion [printer expr]\n  (let [no-color (assoc printer :print-color false)]\n    (color/document printer ::deletion [:span \"-\" (puget-printer/format-doc no-color (:- expr))])))\n\n(defn print-insertion [printer expr]\n  (let [no-color (assoc printer :print-color false)]\n    (color/document printer ::insertion [:span \"+\" (puget-printer/format-doc no-color (:+ expr))])))\n\n(defn print-mismatch [printer expr]\n  [:group\n   [:span \"\"] ;; needed here to make this :nest properly in kaocha.report/print-expr '=\n   [:align\n    (print-deletion printer expr) :line\n    (print-insertion printer expr)]])\n\n(defn print-other [printer expr]\n  (let [no-color (assoc printer :print-color false)]\n    (color/document printer ::other [:span \"-\" (puget-printer/format-doc no-color expr)])))\n\n(defn- map-handler [this value]\n  (let [ks (#'puget-printer/order-collection (:sort-keys this) value (partial sort-by first arrangement.core/rank))\n        entries (map (partial puget-printer/format-doc this) ks)]\n    [:group\n     (color/document this :delimiter \"{\")\n     [:align (interpose [:span (:map-delimiter this) :line] entries)]\n     (color/document this :delimiter \"}\")]))\n\n(defn- map-entry-handler [printer value]\n  (let [k (key value)\n        v (val value)]\n    (let [no-color (assoc printer :print-color false)]\n      (cond\n        (instance? lambdaisland.deep_diff2.diff_impl.Insertion k)\n        [:span\n         (print-insertion printer k)\n         (if (coll? v) (:map-coll-separator printer) \" \")\n         (color/document printer ::insertion (puget-printer/format-doc no-color v))]\n\n        (instance? lambdaisland.deep_diff2.diff_impl.Deletion k)\n        [:span\n         (print-deletion printer k)\n         (if (coll? v) (:map-coll-separator printer) \" \")\n         (color/document printer ::deletion (puget-printer/format-doc no-color v))]\n\n        :else\n        [:span\n         (puget-printer/format-doc printer k)\n         (if (coll? v) (:map-coll-separator printer) \" \")\n         (puget-printer/format-doc printer v)]))))\n\n(def print-handlers\n  (atom #?(:clj\n           {'lambdaisland.deep_diff2.diff_impl.Deletion\n            print-deletion\n\n            'lambdaisland.deep_diff2.diff_impl.Insertion\n            print-insertion\n\n            'lambdaisland.deep_diff2.diff_impl.Mismatch\n            print-mismatch\n\n            'clojure.lang.PersistentArrayMap\n            map-handler\n\n            'clojure.lang.PersistentHashMap\n            map-handler\n\n            'clojure.lang.MapEntry\n            map-entry-handler}\n\n           :cljs\n           {'lambdaisland.deep-diff2.diff-impl/Deletion\n            print-deletion\n\n            'lambdaisland.deep-diff2.diff-impl/Insertion\n            print-insertion\n\n            'lambdaisland.deep-diff2.diff-impl/Mismatch\n            print-mismatch\n\n            'cljs.core/PersistentArrayMap\n            map-handler\n\n            'cljs.core/PersistentHashMap\n            map-handler\n\n            'cljs.core/MapEntry\n            map-entry-handler})))\n\n(defn type-name\n  \"Get the type of the given object as a string. For Clojure, gets the name of\n  the class of the object. For ClojureScript, gets either the `name` attribute\n  or the protocol name if the `name` attribute doesn't exist.\"\n  [x]\n  #?(:clj\n     (symbol (.getName (class x)))\n     :cljs\n     (let [t (type x)\n           n (.-name t)]\n       (if (empty? n)\n         (symbol (pr-str t))\n         (symbol n)))))\n\n(defn- print-handler-resolver [extra-handlers]\n  (fn [obj]\n    (and obj (get (merge @print-handlers extra-handlers)\n                  (symbol (type-name obj))))))\n\n(defn register-print-handler!\n  \"Register an extra print handler.\n\n  `type` must be a symbol of the fully qualified class name. `handler` is a\n  Puget handler function of two arguments, `printer` and `value`.\"\n  [type handler]\n  (swap! print-handlers assoc type handler))\n\n(defn puget-printer\n  ([]\n   (puget-printer {}))\n  ([opts]\n   (let [extra-handlers (:extra-handlers opts)]\n     (puget-printer/pretty-printer (merge {:width          (or *print-length* 100)\n                                           :print-color    true\n                                           :color-scheme   {::deletion  [:red]\n                                                            ::insertion [:green]\n                                                            ::other     [:yellow]\n                                                            ;; lambdaisland.deep-diff2.puget uses green and red for\n                                                            ;; boolean/tag, but we want to reserve\n                                                            ;; those for diffed values.\n                                                            :boolean    [:bold :cyan]\n                                                            :tag        [:magenta]}\n                                           :print-handlers  (dispatch/chained-lookup\n                                                             (print-handler-resolver extra-handlers)\n                                                             puget-printer/common-handlers)}\n                                          (dissoc opts :extra-handlers))))))\n\n(defn format-doc [expr printer]\n  (puget-printer/format-doc printer expr))\n\n(defn print-doc [doc printer]\n  (fipp.engine/pprint-document doc {:width (:width printer)}))\n"]}