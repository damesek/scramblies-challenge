{"version":3,"sources":["lambdaisland/funnel_client.cljs"],"mappings":"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","names":["lambdaisland$funnel-client$Socket$send$dyn","x__4550__auto__","m__4551__auto__","lambdaisland.funnel-client/send","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","lambdaisland.funnel-client/Socket","socket","message","js/goog.define","lambdaisland.funnel-client/FUNNEL_URI","lambdaisland.funnel-client/platform-type","cljs.core/re-find","clojure.string/lower-case","js/module$node_modules$platform$platform","lambdaisland.funnel-client/client-id","lambdaisland.funnel-client.random-id/rand-id","lambdaisland.funnel-client/whoami","cljs.core.atom","js/document","lambdaisland.funnel-client/transit-read-handlers","lambdaisland.funnel-client/transit-write-handlers","lambdaisland.funnel-client/funnel-uri","cljs.core/empty?","protocol","js/location","js/location.protocol","hostname","js/location.hostname","https?","clojure.string/starts-with?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","lambdaisland.funnel-client/noop","seq29111","self__4852__auto__","cljs.core/seq","_","lambdaisland.funnel-client/atom?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IAtom","p__29124","map__29125","cljs.core/--destructure-map","cljs.core.get","lambdaisland.funnel-client/connect","uri","on-open","on-message","on-error","on-close","transit-reader","transit-writer","whoami","cljs.core/deref","cognitect.transit.reader","cognitect.transit.writer","opts","lambdaisland.glogi.log","cljs.core/identity","p1__29122#","ws","lambdaisland.funnel-client.websocket/ensure-websocket","js/goog.net.WebSocket","send!","lambdaisland.funnel-client.websocket/send!","cognitect.transit/write","js/Error","lambdaisland.funnel-client.websocket/register-handlers","e","cljs.core.into","cljs.core.map","p1__29123#","cljs.core.juxt","cljs.core/keyword","lambdaisland.funnel_client.goog$module$goog$object.get","js/Object.keys","cljs.core/map?","cljs.core/add-watch","new-whoami","msg","cognitect.transit/read","lambdaisland.funnel-client.websocket/message-data","x29140","lambdaisland.funnel-client.websocket/open?","lambdaisland.funnel-client.websocket/open!","lambdaisland.funnel-client/disconnect!","lambdaisland.funnel-client.websocket/close!"],"sourcesContent":["(ns lambdaisland.funnel-client ;; cljs\n  (:require [clojure.string :as str]\n            [cognitect.transit :as transit]\n            [goog.object :as gobj]\n            [lambdaisland.funnel-client.random-id :as random-id]\n            [lambdaisland.funnel-client.websocket :as websocket]\n            [lambdaisland.glogi :as log]\n            [platform :as platform])\n  (:require-macros [lambdaisland.funnel-client.macros :refer [working-directory]])\n  (:import [goog.net WebSocket]))\n\n(defprotocol Socket\n  (send [socket message]))\n\n(goog-define FUNNEL_URI \"\")\n\n(def platform-type (re-find #\"\\w+\" (str/lower-case (.-name platform))))\n\n(def client-id (str platform-type \"-\" (random-id/rand-id)))\n\n(def whoami (atom {:id                client-id\n                   :has-dom?          (exists? js/document)\n                   :platform-type     platform-type\n                   :platform          (.-description platform)\n                   :working-directory (working-directory)}))\n\n(def transit-read-handlers (atom {}))\n(def transit-write-handlers (atom {}))\n\n(defn funnel-uri []\n  (if (empty? FUNNEL_URI)\n    (let [protocol (if (exists? js/location) js/location.protocol \"http\")\n          hostname (if (exists? js/location) js/location.hostname \"localhost\")\n          https? (str/starts-with? protocol \"https\")]\n      (str (if https? \"wss\" \"ws\") \"://\" hostname \":\" (if https? \"44221\" \"44220\")))\n    FUNNEL_URI))\n\n(defn- noop [& _])\n\n(defn- atom? [x]\n  (satisfies? IAtom x))\n\n(defn connect\n  [{:keys [uri on-open on-message on-error on-close transit-reader transit-writer whoami]\n    :or {uri (funnel-uri)\n         on-open noop\n         on-message noop\n         on-error noop\n         on-close noop\n         transit-reader (transit/reader :json {:handlers @transit-read-handlers})\n         transit-writer (transit/writer :json {:handlers @transit-write-handlers})\n         whoami whoami}\n    :as opts}]\n  (log/info :connecting uri)\n  (let [ws (websocket/ensure-websocket #(goog.net.WebSocket. true))\n        send! #(websocket/send! ws (transit/write transit-writer %))]\n    (assert ws)\n    (websocket/register-handlers ws\n                                 {:open\n                                  (fn [e]\n                                    (log/debug :websocket/open (into {} (map (juxt keyword #(gobj/get e %))) (js/Object.keys e)))\n                                    (send! {:type ::connected\n                                            :funnel/whoami (if (map? whoami) whoami @whoami)})\n                                    (when (atom? whoami)\n                                      (add-watch whoami\n                                                 ::resend-whoami\n                                                 (fn [_ _ _ new-whoami]\n                                                   (send! {:type ::whoami-watch\n                                                           :funnel/whoami new-whoami}))))\n                                    (on-open ws e))\n\n                                  :error\n                                  (fn [e]\n                                    (log/warn :websocket/error {:callback :onerror :event e})\n                                    (on-error ws e))\n\n                                  :message\n                                  (fn [e]\n                                    (let [msg (transit/read transit-reader (websocket/message-data e))]\n                                      (log/finest :websocket/message msg)\n                                      (on-message ws msg)))\n\n                                  :close\n                                  (fn [e]\n                                    (log/info :websocket/close {:callback :onclose :event e})\n                                    (on-close ws e))})\n    (specify! ws\n      Socket\n      (send [socket message]\n        (assert (websocket/open? socket))\n        (log/debug :websocket/send message)\n        (send! message))\n      IMeta\n      (-meta [_]\n        opts))\n    (websocket/open! ws uri)\n    ws))\n\n(defn disconnect! [socket]\n  (when socket\n    (log/info :disconnecting socket)\n    (websocket/close! socket)))\n"]}