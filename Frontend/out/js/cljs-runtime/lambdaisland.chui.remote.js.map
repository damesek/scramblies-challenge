{"version":3,"sources":["lambdaisland/chui/remote.cljs"],"mappings":"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","names":["lambdaisland.chui.remote/init","_","lambdaisland.glogi/set-levels","lambdaisland.glogi.console/install!","lambdaisland.chui.remote/record-handler","type","cognitect.transit.write_handler","cljs.core/constantly","val","cljs.core.into","cljs.core.swap_BANG_","lambdaisland.funnel-client/whoami","cljs.core/assoc","lambdaisland.funnel-client/transit-write-handlers","cljs.core/merge","o","cljs.core/type","cljs.core/Var","rep","cljs.core/meta","js/matcher-combinators","js/matcher-combinators.model","js/matcher-combinators.model.Mismatch","js/matcher-combinators.model.Missing","js/matcher-combinators.model.Unexpected","js/matcher-combinators.model.InvalidMatcherType","js/matcher-combinators.model.InvalidMatcherContext","js/matcher-combinators.model.FailedPredicate","js/matcher-combinators.model.TypeMismatch","lambdaisland.chui.remote/last-msg","cljs.core.atom","kitchen-async.promise/resolve","lambdaisland.chui.remote/send!","message","kitchen-async.promise/then","kitchen-async.promise/->promise","kitchen_async.promise.then","e__24768__auto__","e26817","kitchen-async.promise/reject","m","lambdaisland.funnel-client/send","lambdaisland.chui.remote/socket","lambdaisland.chui.remote/cljs-test-msg","cljs.test/get-current-env","lambdaisland.chui.remote/wrap-report","report","G__26825","cljs.core/Keyword","error","e26826","trace","lambdaisland.chui.stacktrace/from-error","rendered","clojure.string.join","iter__4652__auto__","s__26838","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__26840","cljs.core/chunk-buffer","i__26839","map__26850","cljs.core/-nth","cljs.core/--destructure-map","cljs.core.get","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26837","cljs.core/chunk-rest","map__26851","cljs.core/first","cljs.core/cons","cljs.core/rest","function","file","line","column","cljs.core.assoc","or__4253__auto__","js/lambdaisland","js/lambdaisland.chui","js/lambdaisland.chui.remote","js/lambdaisland.chui.remote.handle-message","method-table__4747__auto__","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__26852","cljs.core/MultiFn","cljs.core.symbol","lambdaisland.chui.remote/handle-message","msg","lambdaisland.glogi.log","cljs.core/identity","lambdaisland.chui.runner/running?","lambdaisland.chui.runner.terminate_BANG_","lambdaisland.chui.runner/install-custom-reporter","lambdaisland.chui.runner/add-test-run!","lambdaisland.chui.runner/test-run","cljs.core.update","lambdaisland.chui.runner.update_run","js/Date","lambdaisland.chui.remote/execute-chain","intors","lambdaisland.chui.runner/current-run","lambdaisland.chui.interceptor/enqueue","lambdaisland.chui.interceptor/execute","p__26859","map__26860","ns","ns-data","cljs.core/deref","lambdaisland.chui.test-data/test-ns-data","___24774__auto__","e26866","ctx","lambdaisland.chui.runner/begin-ns-intors","p__26874","map__26876","e26881","lambdaisland.chui.runner/end-ns-intors","p__26890","map__26891","test","cljs.core/namespace","test-data","p1__26887#","cljs.core/some","cljs.core._EQ_","e26892","lambdaisland.chui.runner/wrap-each-fixtures","lambdaisland.chui.runner/var-intors","lambdaisland.chui.runner/var-summary","p1__26888#","p1__26889#","lambdaisland.chui.remote/scrub-var-data","vars-data","p1__26893#","cljs.core.map","cljs.core.dissoc","lambdaisland.chui.remote/scrub-test-data","p1__26894#","cljs.core.comp","cljs.core/val","lambdaisland.chui.remote/connect!","lambdaisland.funnel-client/connect","lambdaisland.chui.remote/disconnect!","lambdaisland.funnel-client/disconnect!","js/lambdaisland.chui.remote.init-conn","lambdaisland.chui.remote/init-conn","js/document","js/document.title","cljs.core/chunk-first"],"sourcesContent":["(ns lambdaisland.chui.remote\n  {:dev/always true}\n  (:require [cljs.pprint :as pp :include-macros true]\n            [cljs.test :as t]\n            [clojure.string :as str]\n            [cognitect.transit :as transit]\n            [goog.dom :as gdom]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [kitchen-async.promise :as p]\n            [lambdaisland.chui.interceptor :as intor]\n            [lambdaisland.chui.runner :as runner]\n            [lambdaisland.chui.test-data :as test-data]\n            [lambdaisland.chui.stacktrace :as stacktrace]\n            [lambdaisland.funnel-client :as funnel-client]\n            [lambdaisland.glogi :as log]\n            [lambdaisland.glogi.console :as glogi-console])\n  (:require-macros [lambdaisland.chui.remote.macros :refer [working-directory]])\n  (:import [goog.string StringBuffer]))\n\n(defn ^:export init [_])\n\n(log/set-levels '{:glogi/root :finest})\n\n(glogi-console/install!)\n\n(defn record-handler [type]\n  (transit/write-handler (constantly type)\n                         (fn [val]\n                           (into {} val))))\n\n(swap! funnel-client/whoami\n       assoc\n       :lambdaisland.chui.remote? true)\n\n(swap! funnel-client/transit-write-handlers\n       merge\n\n       {:default (transit/write-handler\n                  (fn [o]\n                    (str (type o)))\n                  (fn [o]\n                    (str o)))\n\n        cljs.core/Var (transit/write-handler\n                       (constantly \"var\")\n                       (fn [rep] (meta rep)))}\n\n       (when (exists? matcher-combinators.model/Mismatch)\n         {^:cljs.analyzer/no-resolve matcher-combinators.model.Mismatch\n          (record-handler \"matcher-combinators.model.Mismatch\")})\n       (when (exists? matcher-combinators.model/Missing)\n         {^:cljs.analyzer/no-resolve matcher-combinators.model.Missing\n          (record-handler \"matcher-combinators.model.Missing\")})\n       (when (exists? matcher-combinators.model/Unexpected)\n         {^:cljs.analyzer/no-resolve matcher-combinators.model.Unexpected\n          (record-handler \"matcher-combinators.model.Unexpected\")})\n       (when (exists? matcher-combinators.model/InvalidMatcherType)\n         {^:cljs.analyzer/no-resolve matcher-combinators.model.InvalidMatcherType\n          (record-handler \"matcher-combinators.model.InvalidMatcherType\")})\n       (when (exists? matcher-combinators.model/InvalidMatcherContext)\n         {^:cljs.analyzer/no-resolve matcher-combinators.model.InvalidMatcherContext\n          (record-handler \"matcher-combinators.model.InvalidMatcherContext\")})\n       (when (exists? matcher-combinators.model/FailedPredicate)\n         {^:cljs.analyzer/no-resolve matcher-combinators.model.FailedPredicate\n          (record-handler \"matcher-combinators.model.FailedPredicate\")})\n       (when (exists? matcher-combinators.model/TypeMismatch)\n         {^:cljs.analyzer/no-resolve matcher-combinators.model.TypeMismatch\n          (record-handler \"matcher-combinators.model.TypeMismatch\")}))\n\n(declare socket)\n\n(def last-msg (atom (p/resolve nil)))\n\n;; This is a bit hairy, assure that messages are sent in order of calling\n;; `send!`, even though `send!` can be called with a promise. To do so we stack\n;; promises, relying on the fact that successive `then` calls are handled in\n;; order\n(defn send! [message]\n  (swap! last-msg\n         p/then\n         (fn [_]\n           (p/let [m message]\n             (funnel-client/send socket m)))))\n\n;; TODO: replace with deep-diff\n#_\n(defn pretty-print-failure [m]\n  (let [buffer (StringBuffer.)]\n    (binding [humane-print/*sb* buffer\n              *out*             (pp/get-pretty-writer (StringBufferWriter. buffer))]\n      (let [{:keys [type expected actual diffs message] :as event}\n            (humane-print/convert-event m)\n            print-expected (fn [actual]\n                             (humane-print/rprint \"Expected:\\n  \")\n                             (pp/pprint expected *out*)\n                             (humane-print/rprint \"Actual:\\n  \")\n                             (pp/pprint actual *out*))]\n        (if (seq diffs)\n          (doseq [[actual [a b]] diffs]\n            (print-expected actual)\n            (humane-print/rprint \"Diff:\\n  \")\n            (if a\n              (do (humane-print/rprint \"- \")\n                  (pp/pprint a *out*)\n                  (humane-print/rprint \"  + \"))\n              (humane-print/rprint \"+ \"))\n            (when b\n              (pp/pprint b *out*)))\n          (print-expected actual)))\n      (str humane-print/*sb*))))\n\n(defn cljs-test-msg [m]\n  {:type :cljs.test/message\n   :cljs.test/message m\n   :cljs.test/testing-contexts (:testing-contexts (t/get-current-env))})\n\n#_(assoc m :kaocha.report/printed-expression\n         (pretty-print-failure m))\n\n(defn wrap-report [report]\n  (fn [m]\n    (send!\n     (case (:type m)\n       :fail (cljs-test-msg m)\n       :error\n       (let [error (:actual m)]\n         (p/let [trace (stacktrace/from-error error)]\n           (let [rendered (str/join\n                           \"\\n\"\n                           (for [{:keys [function file line column]} trace]\n                             (str function \" (\" file \":\" line \":\" column \")\")))]\n             (cljs-test-msg\n              (assoc m\n                     :kaocha.report/printed-expression (str error \"\\n\" rendered \"\\n\")\n                     :kaocha.report/error-type (str \"js/\" (.-name error))\n                     :message (or (:message m) (.-message error)))))))\n       ;;:else\n       (cljs-test-msg m)))\n    (report m)))\n\n(defmulti handle-message :type)\n\n(defmethod handle-message :default [msg]\n  (log/debug :unhandled-message msg))\n\n(defmethod handle-message :ping [msg]\n  (send! {:type :pong}))\n\n(defmethod handle-message :start-run [msg]\n  (when (runner/running?)\n    (runner/terminate!))\n  (runner/install-custom-reporter)\n  (runner/add-test-run! (-> (runner/test-run)\n                            (assoc :test-count (:test-count msg)\n                                   :remote? true)\n                            (update :report wrap-report)))\n  (send! {:type :run-started :reply-to (:id msg)}))\n\n(defmethod handle-message :finish-run [msg]\n  (runner/update-run assoc\n                     :end (js/Date.)\n                     :done? true)\n  (send! {:type :run-finished :reply-to (:id msg)}))\n\n(defn execute-chain [intors]\n  (-> (:ctx (runner/current-run))\n      (intor/enqueue intors)\n      intor/execute))\n\n(defmethod handle-message :start-ns [{:keys [ns] :as msg}]\n  (let [ns-data (get @test-data/test-ns-data ns)]\n    (log/trace :start-ns/starting ns-data)\n    (p/let [ctx (execute-chain (runner/begin-ns-intors ns (:once-fixtures ns-data)))]\n      (runner/update-run assoc :ctx ctx)\n      (send! {:type :ns-started :reply-to (:id msg)}))))\n\n(defmethod handle-message :finish-ns [{:keys [ns] :as msg}]\n  (let [ns-data (get @test-data/test-ns-data ns)]\n    (log/trace :finish-ns/starting ns-data)\n    (p/let [ctx (execute-chain (runner/end-ns-intors ns (:once-fixtures ns-data)))]\n      (runner/update-run assoc :ctx ctx)\n      (send! {:type :ns-finished :reply-to (:id msg)}))))\n\n(defmethod handle-message :run-test [{:keys [test] :as msg}]\n  (let [ns        (symbol (namespace test))\n        ns-data   (get @test-data/test-ns-data ns)\n        test-data (some #(when (= test (:name %))\n                           %)\n                        (:tests ns-data))]\n    (p/let [ctx (execute-chain (runner/wrap-each-fixtures\n                                ns\n                                (runner/var-intors test-data)\n                                (:each-fixtures ns-data)))]\n      (runner/update-run assoc :ctx ctx)\n      (send! {:type :test-finished\n              :reply-to (:id msg)\n              :summary (runner/var-summary (->> (runner/current-run)\n                                                :nss\n                                                (some #(when (= (:ns %) ns) %))\n                                                :vars\n                                                (some #(when (= (:name %) test) %))))}))))\n\n(defn scrub-var-data [vars-data]\n  (map #(dissoc % :test :var :ns) vars-data))\n\n(defn scrub-test-data [test-data]\n  (map (comp #(-> %\n                  (dissoc :once-fixtures :each-fixtures)\n                  (update :tests scrub-var-data)) val)\n       test-data))\n\n(defmethod handle-message :fetch-test-data [msg]\n  (send! {:type :test-data\n          :reply-to (:id msg)\n          :test-data (scrub-test-data\n                      @test-data/test-ns-data)}))\n\n(defn connect! []\n  (set! socket (funnel-client/connect {:on-message (fn [_ msg] (handle-message msg))})))\n\n(defn disconnect! []\n  (when socket\n    (log/info :msg \"Disconnecting funnel\")\n    (funnel-client/disconnect! socket)\n    (set! socket nil)))\n\n(defonce init-conn (connect!))\n\n\n(when (exists? js/document)\n  (set! js/document.title (:id @funnel-client/whoami)))\n\n#_\n(defonce ui ;; temporary, for testing\n  (do\n    (when-not (.getElementById js/document \"chui-container\")\n      (let [app (gdom/createElement \"div\")]\n        (gdom/setProperties app #js {:id \"chui-container\"})\n        (gdom/append js/document.body app)))\n\n    (ui/render! (.getElementById js/document \"chui-container\"))))\n"]}