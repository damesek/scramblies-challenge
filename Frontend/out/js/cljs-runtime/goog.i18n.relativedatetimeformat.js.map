{
"version":3,
"file":"goog.i18n.relativedatetimeformat.js",
"lineCount":191,
"mappings":"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",
"sources":["goog/i18n/relativedatetimeformat.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview RelativeDateTimeFormat provides methods to format simple\n * relative dates and times into a string in a user friendly way and a locale\n * sensitive manner. Numeric quantities are supported with negative values\n * indicating the past, zero meaning now, and positive for the future. Specific\n * named times such as \"tomorrow\" are returned and correctly pluralized results\n * are given for relative times without specific names such as \"in 5 days\" or \"3\n * weeks ago\". The result is localized according to current locale value.\n *\n * Similar to the ICU4J class com/ibm/icu/text/RelativeDateTimeFormatter:\n * http://icu-project.org/apiref/icu4j/com/ibm/icu/text/RelativeDateTimeFormatter.html\n */\n\ngoog.module('goog.i18n.RelativeDateTimeFormat');\n\n// For referencing goog.i18n.USE_ECMASCRIPT_I18N_RDTF to determine compile-time\n// choice of ECMAScript vs. JavaScript implementation and data.\nconst LocaleFeature = goog.require('goog.i18n.LocaleFeature');\n\nconst MessageFormat = goog.require('goog.i18n.MessageFormat');\nconst asserts = goog.require('goog.asserts');\nconst relativeDateTimeSymbols = goog.require('goog.i18n.relativeDateTimeSymbols');\n\n/**\n * @constructor\n * @param {!RelativeDateTimeFormat.NumericOption=} opt_numeric\n *     This optional string determines if formatted output is always\n *     the numeric formatting rather than available relative strings.\n *     ALWAYS (default) forces numeric results in all uses of this instance.\n *     AUTO mode uses available relative strings such as \"tomorrow\", falling\n * back to numeric.\n * @param {!RelativeDateTimeFormat.Style=} opt_style\n *     This optional value determines the style of the relative time output.\n *     Values include LONG, SHORT, NARROW. Default is LONG.\n *     as part of the resulting formatted string\n * @param {!relativeDateTimeSymbols.RelativeDateTimeSymbols=}\n *     opt_relativeDateTimeSymbols This optional value can be used to set the\n *     data for to use for this instance rather than obtaining from\n *     relativedatetimesymbols.\n * @final\n */\nlet RelativeDateTimeFormat = function(\n    opt_numeric, opt_style, opt_relativeDateTimeSymbols) {\n  /**\n   * Records if the implementation is ECMAScript\n   * @private @type {boolean}\n   */\n  this.nativeMode_ = false;\n\n  if (!LocaleFeature.USE_ECMASCRIPT_I18N_RDTF) {\n    asserts.assert(\n        opt_relativeDateTimeSymbols ||\n            relativeDateTimeSymbols.getRelativeDateTimeSymbols(),\n        'goog.i18n.RelativeDateTimeSymbols requires symbols ECMAScript mode');\n    /**\n     * RelativeDateTimeSymbols object for locale data required by the formatter.\n     * @private @const {?relativeDateTimeSymbols.RelativeDateTimeSymbols}\n     */\n    this.rdtfSymbols_ = !LocaleFeature.USE_ECMASCRIPT_I18N_RDTF ?\n        (opt_relativeDateTimeSymbols ||\n         relativeDateTimeSymbols.getRelativeDateTimeSymbols()) :\n        null;\n  }\n  if (!this.rdtfSymbols_) {\n    this.nativeMode_ = true;\n  }\n\n  /**\n   * Flag to force numeric mode in all cases. Normally true.\n   * @private @type {boolean}\n   */\n  this.alwaysNumeric_ = true;\n  if (opt_numeric) {\n    asserts.assert(\n        opt_numeric == RelativeDateTimeFormat.NumericOption.ALWAYS ||\n            opt_numeric == RelativeDateTimeFormat.NumericOption.AUTO,\n        'Invalid opt_numeric value');\n    if (opt_numeric == RelativeDateTimeFormat.NumericOption.ALWAYS) {\n      this.alwaysNumeric_ = true;\n    } else if (opt_numeric == RelativeDateTimeFormat.NumericOption.AUTO) {\n      this.alwaysNumeric_ = false;\n    }\n  }\n\n  /** @private @type {!RelativeDateTimeFormat.Style} */\n  this.style_ = RelativeDateTimeFormat.Style.LONG;\n  if (opt_style) {\n    asserts.assert(\n        opt_style >= RelativeDateTimeFormat.Style.LONG &&\n            opt_style <= RelativeDateTimeFormat.Style.NARROW,\n        'Style must be LONG, SHORT, or NARROW');\n    this.style_ = opt_style;\n  }\n};\n\n/**\n * Values for setting the numeric mode in the constructor.\n * @enum {string}\n */\nRelativeDateTimeFormat.NumericOption = {\n  ALWAYS: 'always',\n  AUTO: 'auto',\n};\n\n/**\n * Collection of public style symbols.\n * @enum {number}\n */\nRelativeDateTimeFormat.Style = {\n  LONG: 0,\n  SHORT: 1,\n  NARROW: 2\n};\n\n/**\n * Relative unit constants for public use.\n * @enum {number}\n */\nRelativeDateTimeFormat.Unit = {\n  YEAR: 0,\n  QUARTER: 1,\n  MONTH: 2,\n  WEEK: 3,\n  DAY: 4,\n  HOUR: 5,\n  MINUTE: 6,\n  SECOND: 7\n};\n\n/**\n * Formats a string with the amount and relative unit. If data for the quantity\n * is not available in the requested style, then it falls back to next style. If\n * not available in any style, then it reverts to formatNumeric for the same\n * unit.\n * @param {number} quantity  A desired offset from current time, negative\n *     for past, 0 for now, positive for future.\n * @param {!RelativeDateTimeFormat.Unit} relativeUnit  Type such as HOUR, YEAR,\n *     QUARTER.\n * @return {string} The formatted result. May be empty string for an\n *   unsupported locale.\n */\nRelativeDateTimeFormat.prototype.format = function(quantity, relativeUnit) {\n  asserts.assertNumber(quantity, 'Quantity must be a number');\n  asserts.assert(\n      relativeUnit >= RelativeDateTimeFormat.Unit.YEAR &&\n          relativeUnit <= RelativeDateTimeFormat.Unit.SECOND,\n      'Unit must be one of the supported values');\n\n  /**\n   * Special cases to force numeric units, in order\n   * to match ICU4J as described in\n   * http://unicode.org/cldr/trac/ticket/9165\n   * http://bugs.icu-project.org/trac/ticket/12171\n   */\n\n  if (LocaleFeature.USE_ECMASCRIPT_I18N_RDTF) {\n    return this.formatNative_(quantity, relativeUnit, this.alwaysNumeric_);\n  } else {\n    return this.formatPolyfill_(quantity, relativeUnit, this.alwaysNumeric_);\n  }\n};\n\n/**\n * Format using pure JavaScript\n * @param {number} quantity Desired offset from current date/time.\n * @param {!RelativeDateTimeFormat.Unit} relativeUnit  Type such as HOUR, YEAR,\n *     QUARTER.\n * @param {boolean} useNumeric True if numeric output is forced.\n * @return {string} The formatted result. May be empty string for an\n *   unsupported locale.\n * @private\n */\nRelativeDateTimeFormat.prototype.formatPolyfill_ = function(\n    quantity, relativeUnit, useNumeric) {\n  /**\n   * Find the right data based on Unit, quantity, and plural.\n   */\n  const rdtfUnitPattern = this.getUnitStylePattern_(relativeUnit);\n  // Formats using Closure Javascript. Check for forcing numeric and having\n  // relative value with the given quantity.\n  if (!useNumeric && rdtfUnitPattern && rdtfUnitPattern.R &&\n      rdtfUnitPattern.R['' + quantity]) {\n    return rdtfUnitPattern.R['' + quantity];\n  } else {\n    // Direction data doesn't exist. Fallback to format numeric.\n    return this.formatNumericInternal_(quantity, rdtfUnitPattern);\n  }\n};\n\n/**\n * Format using ECMAScript Intl class RelativeTimeFormat\n * @param {number} quantity Desired offset from current date/time.\n * @param {!RelativeDateTimeFormat.Unit} relativeUnit  Type such as HOUR, YEAR,\n *     QUARTER.\n * @param {boolean} useNumeric True if numeric output is forced.\n * @return {string} The formatted result. May be empty string for an\n *   unsupported locale.\n * @private\n */\nRelativeDateTimeFormat.prototype.formatNative_ = function(\n    quantity, relativeUnit, useNumeric) {\n  // Use built-in ECMAScript Intl object.\n  let options = {\n    'numeric': useNumeric ? 'always' : 'auto',\n  };\n  switch (this.style_) {\n    case RelativeDateTimeFormat.Style.NARROW:\n      options['style'] = 'narrow';\n      break;\n    case RelativeDateTimeFormat.Style.SHORT:\n      options['style'] = 'short';\n      break;\n    case RelativeDateTimeFormat.Style.LONG:\n      options['style'] = 'long';\n    default:\n      break;\n  }\n\n  // Use built-in ECMAScript Intl object.\n  const intl = goog.global.Intl;\n  let intlFormatter;\n  try {\n    // Fix \"_\" to \"-\" to correspond to BCP-47.\n    intlFormatter =\n        new intl.RelativeTimeFormat(goog.LOCALE.replace(/_/g, '-'), options);\n  } catch (err) {\n    // An empty string is returned for an unsupported LOCALE.\n    return '';\n  }\n\n  let unit = 'year';\n  switch (relativeUnit) {\n    case RelativeDateTimeFormat.Unit.YEAR:\n      unit = 'year';\n      break;\n    case RelativeDateTimeFormat.Unit.QUARTER:\n      unit = 'quarter';\n      break;\n    case RelativeDateTimeFormat.Unit.MONTH:\n      unit = 'month';\n      break;\n    case RelativeDateTimeFormat.Unit.WEEK:\n      unit = 'week';\n      break;\n    case RelativeDateTimeFormat.Unit.DAY:\n      unit = 'day';\n      break;\n    case RelativeDateTimeFormat.Unit.HOUR:\n      unit = 'hour';\n      break;\n    case RelativeDateTimeFormat.Unit.MINUTE:\n      unit = 'minute';\n      break;\n    case RelativeDateTimeFormat.Unit.SECOND:\n      unit = 'second';\n      break;\n  }\n  return intlFormatter.format(quantity, unit);\n};\n\n/**\n * Format with forced numeric value and relative unit.\n * @param {number} quantity  The number of units.\n *     Negative zero will use PAST, while unsiged or positive indicates FUTURE.\n * @param {!relativeDateTimeSymbols.StyleElement|undefined} unitStylePattern Has\n *     PAST and FUTURE fields.\n * @return {string}  The formatted result.\n * @private\n */\nRelativeDateTimeFormat.prototype.formatNumericInternal_ = function(\n    quantity, unitStylePattern) {\n  if (!unitStylePattern) return '';\n\n  /**\n   * Stores the plural formatting string.\n   * @type {string}\n   */\n  let relTimeString;\n  const absQuantity = Math.abs(quantity);\n\n  // Apply MessageFormat to the unit with FUTURE or PAST quantity, with test for\n  // signed zero value.\n  if (quantity > 0 || (quantity == 0 && (1 / quantity) == Infinity)) {\n    relTimeString = unitStylePattern.F;\n  } else {\n    // Negative zero is interpreted as the past.\n    relTimeString = unitStylePattern.P;\n  }\n\n  /**\n   * Formatter for the messages requiring units. Plural formatting needed.\n   * @type {?MessageFormat}\n   */\n  // Take basic message and wrap with plural message type.\n  const msgFormatter = new MessageFormat('{N,plural,' + relTimeString + '}');\n  return msgFormatter.format({'N': absQuantity});\n};\n\n\n/**\n * From the data, return the information for the given unit and style.\n * @param {number} relativeUnit\n * @return {!relativeDateTimeSymbols.StyleElement|undefined}  RelativeUnitStyle\n * @private\n */\nRelativeDateTimeFormat.prototype.getUnitStylePattern_ = function(relativeUnit) {\n  const unitInfo = this.getUnitPattern_(relativeUnit);\n  asserts.assertObject(unitInfo);\n  return this.getStylePattern_(unitInfo);\n};\n\n\n/**\n * Use public unit symbol to retrieve data for that unit, given the style.\n * @param{!relativeDateTimeSymbols.RelativeDateTimeFormatStyles} unit\n * @return {!relativeDateTimeSymbols.StyleElement|undefined}\n * @private\n */\nRelativeDateTimeFormat.prototype.getStylePattern_ = function(unit) {\n  // Fall back from NARROW to SHORT to LONG as needed.\n  switch (this.style_) {\n    case RelativeDateTimeFormat.Style.NARROW:\n      if (unit.NARROW != undefined) {\n        return unit.NARROW;\n      }\n    case RelativeDateTimeFormat.Style.SHORT:\n      if (unit.SHORT != undefined) {\n        return unit.SHORT;\n      }\n    case RelativeDateTimeFormat.Style.LONG:\n    default:\n      return unit.LONG;\n  }\n};\n\n/**\n * Returns the style set for this formatter.\n * @return {number}  One of LONG, SHORT, NARROW,\n */\nRelativeDateTimeFormat.prototype.getFormatStyle = function() {\n  return this.style_;\n};\n\n/**\n * Returns the status of the alwaysNumeric field.\n * @return {!RelativeDateTimeFormat.NumericOption}\n */\nRelativeDateTimeFormat.prototype.getNumericMode = function() {\n  if (this.alwaysNumeric_) {\n    return RelativeDateTimeFormat.NumericOption.ALWAYS;\n  } else {\n    return RelativeDateTimeFormat.NumericOption.AUTO;\n  }\n};\n\n/**\n * Use public unit symbol to retrieve data for that unit.\n * @param {number|!relativeDateTimeSymbols.RelativeDateTimeFormatStyles} unit\n * @return {!relativeDateTimeSymbols.RelativeDateTimeFormatStyles}\n * @private\n */\nRelativeDateTimeFormat.prototype.getUnitPattern_ = function(unit) {\n  switch (unit) {\n    default:\n    case RelativeDateTimeFormat.Unit.YEAR:\n      return this.rdtfSymbols_.YEAR;\n    case RelativeDateTimeFormat.Unit.QUARTER:\n      return this.rdtfSymbols_.QUARTER;\n    case RelativeDateTimeFormat.Unit.MONTH:\n      return this.rdtfSymbols_.MONTH;\n    case RelativeDateTimeFormat.Unit.WEEK:\n      return this.rdtfSymbols_.WEEK;\n    case RelativeDateTimeFormat.Unit.DAY:\n      return this.rdtfSymbols_.DAY;\n    case RelativeDateTimeFormat.Unit.HOUR:\n      return this.rdtfSymbols_.HOUR;\n    case RelativeDateTimeFormat.Unit.MINUTE:\n      return this.rdtfSymbols_.MINUTE;\n    case RelativeDateTimeFormat.Unit.SECOND:\n      return this.rdtfSymbols_.SECOND;\n  }\n};\n\n/**\n * Returns relative field for an offset of a given value unit\n * if it is defined for the current style.\n * If the value does not exist, return undefined.\n * For example, is there a -2 offset for DAY in the current locale and style.\n * Note: This data is not available in an ECMAScript implementation.\n * @param{!RelativeDateTimeFormat.Unit} unit\n * @param{string|number} offset\n * @return{string|undefined}\n * @deprecated\n */\nRelativeDateTimeFormat.prototype.isOffsetDefinedForUnit = function(\n    unit, offset) {\n  if (this.rdtfSymbols_ == undefined) {\n    return undefined;\n  }\n\n  const rdtfUnitPattern = this.getUnitStylePattern_(unit);\n  // Check for force numeric and requested unit and offset.\n  if (typeof (offset) == 'string') {\n    offset = Number(offset);\n  }\n  if (rdtfUnitPattern && rdtfUnitPattern.R && rdtfUnitPattern.R['' + offset]) {\n    return rdtfUnitPattern.R['' + offset];\n  } else {\n    return undefined;\n  }\n};\n\n/**\n * Returns the implementation used for this formatter.\n * @return {boolean}  True iff native mode. False if polyfill.\n * @package\n */\nRelativeDateTimeFormat.prototype.isNativeMode = function() {\n  return this.nativeMode_;\n};\n\n/**\n * Returns true if a ECMAScript formatter is available in the browser.\n * @return {boolean} Whether the ECMAScript implementation available.\n * @package\n */\nRelativeDateTimeFormat.prototype.hasNativeRdtf = function() {\n  const intl = goog.global.Intl;\n  return (Boolean(intl && intl.RelativeTimeFormat));\n};\n\nexports = RelativeDateTimeFormat;\n"],
"names":["goog","module","LocaleFeature","require","MessageFormat","asserts","relativeDateTimeSymbols","RelativeDateTimeFormat","opt_numeric","opt_style","opt_relativeDateTimeSymbols","nativeMode_","USE_ECMASCRIPT_I18N_RDTF","assert","getRelativeDateTimeSymbols","rdtfSymbols_","alwaysNumeric_","NumericOption","ALWAYS","AUTO","style_","Style","LONG","NARROW","SHORT","Unit","YEAR","QUARTER","MONTH","WEEK","DAY","HOUR","MINUTE","SECOND","prototype","format","RelativeDateTimeFormat.prototype.format","quantity","relativeUnit","assertNumber","formatNative_","formatPolyfill_","RelativeDateTimeFormat.prototype.formatPolyfill_","useNumeric","rdtfUnitPattern","getUnitStylePattern_","R","formatNumericInternal_","RelativeDateTimeFormat.prototype.formatNative_","options","intl","global","Intl","intlFormatter","RelativeTimeFormat","LOCALE","replace","err","unit","RelativeDateTimeFormat.prototype.formatNumericInternal_","unitStylePattern","relTimeString","absQuantity","Math","abs","Infinity","F","P","msgFormatter","RelativeDateTimeFormat.prototype.getUnitStylePattern_","unitInfo","getUnitPattern_","assertObject","getStylePattern_","RelativeDateTimeFormat.prototype.getStylePattern_","undefined","getFormatStyle","RelativeDateTimeFormat.prototype.getFormatStyle","getNumericMode","RelativeDateTimeFormat.prototype.getNumericMode","RelativeDateTimeFormat.prototype.getUnitPattern_","isOffsetDefinedForUnit","RelativeDateTimeFormat.prototype.isOffsetDefinedForUnit","offset","Number","isNativeMode","RelativeDateTimeFormat.prototype.isNativeMode","hasNativeRdtf","RelativeDateTimeFormat.prototype.hasNativeRdtf","Boolean","exports"]
}
